import telebot
from telebot import types  # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
import config
from users_tb_iter import insert_user, check_existence, update_user_tb, update_user_hobbies_tb, update_user_topics_tb, \
    get_user_tb_column_val

bot = telebot.TeleBot(config.token)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = (types.KeyboardButton(button_text) for button_text in config.start_buttons)
    markup.add(*buttons)
    bot.send_message(message.chat.id,
                     text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! {config.intro_text}",
                     reply_markup=markup)
    if not check_existence(message.from_user.username):
        insert_user(username=message.from_user.username)


def get_gender(message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    buttons = [types.InlineKeyboardButton(text=gender,
                                          callback_data=gender)
               for gender in config.genders]
    keyboard.add(*buttons)
    bot.send_message(message.chat.id,
                     '–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–µ–Ω–¥–µ—Ä:\n P.S. –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –Ω–∞—à–∏—Ö —é–∑–µ—Ä–æ–≤ —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–Ω–∞—Ç—å —ç—Ç–æ –ø–µ—Ä–µ–¥ –≤—Å—Ç—Ä–µ—á–µ–π)',
                     reply_markup=keyboard)


def get_age(message):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(text=age,
                                          callback_data=age)
               for age in config.ages]
    keyboard.add(*buttons)
    bot.send_message(message.chat.id,
                     '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:',
                     reply_markup=keyboard)


def get_hobbies(message):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(text=hobby,
                                          callback_data=hobby)
               for hobby in config.common_hobbies]

    keyboard.add(*buttons)
    bot.send_message(message.chat.id,
                     '–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –Ω–∞–º –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö. –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ—Ç 1 –¥–æ 8 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:',
                     reply_markup=keyboard)


def get_conv_topics(message):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(text=topic,
                                          callback_data=topic)
               for topic in config.common_conv_topics]

    keyboard.add(*buttons)
    bot.send_message(message.chat.id,
                     '–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ: –æ —á–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å? (—É–∫–∞–∂–∏ —Ö–æ—Ç—è –±—ã 1 –ø—É–Ω–∫—Ç üòÑ)',
                     reply_markup=keyboard)


# CODE DOUBLING!!
@bot.callback_query_handler(func=lambda call: True)
def update_data(call):
    if call.message:
        info = call.data
        stage = get_user_tb_column_val(call.message.chat.username, "stage")
        if info in config.genders and stage == 0:
            update_user_tb(call.message.chat.username, "gender", info)
            bot.send_message(call.message.chat.id, text=f'–ì–µ–Ω–¥–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "{info}"')
            get_age(call.message)
            update_user_tb(call.message.chat.username, "stage", 1)
        elif info in config.ages and stage == 1:
            update_user_tb(call.message.chat.username, "age", info)
            bot.send_message(call.message.chat.id, text=f'–í–æ–∑—Ä–∞—Å—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "{info}"')
            get_hobbies(call.message)
            update_user_tb(call.message.chat.username, "stage", 2)
        elif info in config.common_hobbies and info != 'DONE' and stage in [2, 3]:
            update_user_hobbies_tb(call.message.chat.username, info)
            bot.send_message(call.message.chat.id, text=f'–î–æ–±–∞–≤–∏–ª —Ö–æ–±–±–∏ "{info}"')
            update_user_tb(call.message.chat.username, "stage", 3)
        elif info == 'DONE' and stage == 3:
            bot.send_message(call.message.chat.id, text='–•–æ–±–±–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã! –ò–¥–µ–º –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º!')
            get_conv_topics(call.message)
            update_user_tb(call.message.chat.username, "stage", 4)
        elif info in config.common_conv_topics and info != 'FINISH' and stage in [4, 5]:
            update_user_topics_tb(call.message.chat.username, info)
            bot.send_message(call.message.chat.id, text=f'–î–æ–±–∞–≤–∏–ª —Ç–µ–º—É "{info}"')
            update_user_tb(call.message.chat.username, "stage", 5)
        elif info == 'FINISH' and stage == 5:
            bot.send_message(call.message.chat.id,
                             text='–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã –ª—é–¥–∏ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞–ª–∏, —á—Ç–æ —Ç—ã –∑–∞ —Ñ—Ä—É–∫—Ç, –Ω–µ–º–Ω–æ–≥–æ –æ–ø–∏—à–∏ —Å–µ–±—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ:')


@bot.message_handler(content_types=['text'])
def communicate(message):
    if message.text == "–ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Å–æ–±—ã—Ç–∏—è":
        if get_user_tb_column_val(message.from_user.username, "stage") == 6:
            bot.send_message(message.chat.id, text="–û–ø–∏—à–∏ –º–Ω–µ –µ–≥–æ!")
        else:
            bot.send_message(message.chat.id, text="–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ!")
    elif message.text == "–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ":
        if get_user_tb_column_val(message.from_user.username, "stage") == 6:
            bot.send_message(message.chat.id, text="–û–ø–∏—à–∏ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å!")
        else:
            bot.send_message(message.chat.id, text="–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ!")
    elif message.text == "–ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏—Ö —é–∑–µ—Ä–æ–≤":
        if get_user_tb_column_val(message.from_user.username, "stage") == 6:
            bot.send_message(message.chat.id, "–©–∞ –∫–∞–∫ —Å–¥–µ–ª–∞—é –º—ç—Ç—á!")
        else:
            bot.send_message(message.chat.id, text="–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ!")
    elif message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å':
        update_user_tb(message.chat.username, "stage", 0)
        bot.send_message(message.chat.id, "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!")
        # –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —é–∑–µ—Ä–µ
        get_gender(message)
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = (types.KeyboardButton(button_text) for button_text in config.start_buttons)
        markup.add(*buttons)
        bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
    # –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º self-description. –ò–Ω–∞—á–µ –Ω–µ—Ç —Å–º—ã—Å–ª–∞ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–ª–æ–≤–∞ —é–∑–µ—Ä–∞)
    elif get_user_tb_column_val(message.from_user.username, "stage") == 5:
        update_user_tb(message.chat.username, "self_description", message.text)
        bot.send_message(message.chat.id, text=f'–û—Ç–ª–∏—á–Ω–æ! –ú—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏.\n–¢–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n"{message.text}"')
        update_user_tb(message.from_user.username, "stage", 6)


bot.polling(none_stop=True)
